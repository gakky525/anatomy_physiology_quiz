# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


// 'use client';

// import { useRouter } from 'next/navigation';
// import { useState, useEffect, useRef } from 'react';

// type Choice = {
//   id: number;
//   text: string;
//   isCorrect: boolean;
// };

// type Question = {
//   id: number;
//   question: string;
//   explanation: string;
//   choices: Choice[];
// };

// function Placeholder() {
//   return (
//     <div className='space-y-5 animate-pulse'>
//       <div className='h-6 bg-gray-300 rounded w-3/4'></div>
//       {[...Array(5)].map((_, i) => (
//         <div key={i} className='h-6 bg-gray-300 rounded w-full' />
//       ))}
//     </div>
//   );
// }

// export default function QuestionDisplay({
//   question: initialQuestion,
//   category,
//   field,
// }: {
//   question: Question;
//   category: string;
//   field: string;
// }) {
//   const router = useRouter();
//   const [question, setQuestion] = useState<Question | null>(initialQuestion);
//   const [nextQuestion, setNextQuestion] = useState<Question | null>(null);
//   const [selected, setSelected] = useState<number | null>(null);
//   const [showLimitNotice, setShowLimitNotice] = useState(false);
//   const [isTransitioning, setIsTransitioning] = useState(false);
//   const hasShownNoticeRef = useRef(false);

//   const selectedChoice = question?.choices.find((c) => c.id === selected);
//   const isCorrect = selectedChoice?.isCorrect;
//   const correctChoice = question?.choices.find((c) => c.isCorrect);

//   const saveIncorrectQuestion = (q: Question) => {
//     const existing: Question[] = JSON.parse(
//       localStorage.getItem('incorrectQuestions') || '[]'
//     );
//     const filtered = existing.filter((item) => item.id !== q.id);
//     const updated = [q, ...filtered];

//     if (updated.length > 100) {
//       updated.pop();
//       if (!hasShownNoticeRef.current) {
//         setShowLimitNotice(true);
//         hasShownNoticeRef.current = true;
//         setTimeout(() => setShowLimitNotice(false), 5000);
//       }
//     }

//     localStorage.setItem('incorrectQuestions', JSON.stringify(updated));
//   };

//   useEffect(() => {
//     if (
//       selected !== null &&
//       selectedChoice &&
//       !selectedChoice.isCorrect &&
//       question
//     ) {
//       saveIncorrectQuestion(question);
//     }
//   }, [selected, selectedChoice, question]);

//   const handleSelect = async (id: number) => {
//     if (selected === null) {
//       setSelected(id);

//       try {
//         const res = await fetch('/api/questions', {
//           method: 'POST',
//           headers: { 'Content-Type': 'application/json' },
//           body: JSON.stringify({ category, field }),
//           cache: 'no-store',
//         });

//         if (!res.ok) {
//           const errorText = await res.text();
//           console.error('Prefetch failed:', errorText);
//           setNextQuestion(null);
//           return;
//         }

//         const data = await res.json();
//         if (data && Array.isArray(data.choices)) {
//           setNextQuestion(data);
//         } else {
//           setNextQuestion(null);
//         }
//       } catch (err) {
//         console.error('Prefetch error:', err);
//         setNextQuestion(null);
//       }
//     }
//   };

//   const handleBack = () => {
//     router.push(`/subjects/${category}`);
//   };

//   const handleNext = async () => {
//     setIsTransitioning(true);
//     setSelected(null);
//     setQuestion(null);

//     try {
//       let newQuestion: Question;
//       if (nextQuestion) {
//         newQuestion = nextQuestion;
//       } else {
//         const res = await fetch('/api/questions', {
//           method: 'POST',
//           headers: { 'Content-Type': 'application/json' },
//           body: JSON.stringify({ category, field }),
//           cache: 'no-store',
//         });

//         if (!res.ok) {
//           const errorText = await res.text();
//           console.error('Failed to fetch next question:', errorText);
//           setIsTransitioning(false);
//           return;
//         }

//         const data = await res.json();
//         if (!data || !Array.isArray(data.choices)) {
//           console.error('Invalid data received for next question');
//           setIsTransitioning(false);
//           return;
//         }
//         newQuestion = data;
//       }

//       setQuestion(newQuestion);
//       setIsTransitioning(false);

//       fetch('/api/questions', {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({ category, field }),
//         cache: 'no-store',
//       })
//         .then(async (res) => {
//           if (!res.ok) {
//             const errorText = await res.text();
//             console.error('Next-next fetch error:', errorText);
//             setNextQuestion(null);
//             return;
//           }
//           const data = await res.json();
//           if (data && Array.isArray(data.choices)) {
//             setNextQuestion(data);
//           } else {
//             setNextQuestion(null);
//           }
//         })
//         .catch((err) => {
//           console.error('Next-next prefetch failed:', err);
//           setNextQuestion(null);
//         });
//     } catch (err) {
//       console.error('handleNext error:', err);
//       setIsTransitioning(false);
//     }
//   };

//   return (
//     <div className='relative m-4'>
//       {showLimitNotice && (
//         <div className='fixed top-4 left-1/2 transform -translate-x-1/2 bg-yellow-100 text-yellow-800 border border-yellow-400 px-4 py-2 rounded shadow z-50'>
//           復習リストの保存上限に達したため、古い問題を削除して保存しました。
//         </div>
//       )}

//       {!question || isTransitioning ? (
//         <Placeholder />
//       ) : (
//         <div>
//           <h2 className='text-xl font-semibold'>{question.question}</h2>

//           <ul className='space-y-2'>
//             {question.choices.map((choice, index) => {
//               const isSelected = selected === choice.id;
//               return (
//                 <li
//                   key={choice.id}
//                   className={`border border-black text-xl rounded p-2 mt-3 flex items-center gap-2
//                     ${
//                       selected === null
//                         ? 'bg-gray-50 hover:bg-gray-200 cursor-pointer'
//                         : selected === choice.id
//                         ? choice.isCorrect
//                           ? 'bg-green-300'
//                           : 'bg-red-300'
//                         : choice.isCorrect
//                         ? 'bg-green-300'
//                         : 'bg-gray-50'
//                     }
//                     ${selected !== null ? 'cursor-default' : 'cursor-pointer'}
//                   `}
//                   onClick={() => handleSelect(choice.id)}
//                 >
//                   <span className='font-bold'>{index + 1}.</span>
//                   <span>{choice.text}</span>
//                   {selected !== null && isSelected && (
//                     <span>{choice.isCorrect ? '⭕️' : '❌'}</span>
//                   )}
//                 </li>
//               );
//             })}
//           </ul>

//           {selected !== null && (
//             <div>
//               {!isCorrect && correctChoice && (
//                 <p className='text-lg text-green-600'>
//                   正解：{correctChoice.text}
//                 </p>
//               )}
//               <div className='bg-yellow-50 border-l-4 border-yellow-400 p-2 mt-2'>
//                 <p className='text-lg'>{question.explanation}</p>
//               </div>
//             </div>
//           )}

//           <div className='flex gap-4 mt-4 justify-between'>
//             <button
//               onClick={handleBack}
//               className='bg-gray-300 hover:bg-gray-400 px-4 py-3 rounded-lg shadow'
//             >
//               分野選択へ
//             </button>
//             {selected !== null && (
//               <button
//                 onClick={handleNext}
//                 className='bg-blue-400 hover:bg-blue-500 text-white px-4 py-3 rounded-lg shadow'
//               >
//                 次の問題へ
//               </button>
//             )}
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }